// <auto-generated />
using System;
using ML.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ML.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240612222529_a2")]
    partial class a2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ML.Core.Models.Analyse", b =>
                {
                    b.Property<int>("AnalyseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalyseId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("NUint")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnalyseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GroupId");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("ML.Core.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ML.Core.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("lastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ML.Core.Models.DoctorPhone", b =>
                {
                    b.Property<int>("DoctorPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorPhoneId"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorPhoneId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorPhones");
                });

            modelBuilder.Entity("ML.Core.Models.ForDataSet.CKD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<bool?>("Appetite")
                        .HasColumnType("bit");

                    b.Property<int?>("BloodUrea")
                        .HasColumnType("int");

                    b.Property<bool?>("Class")
                        .HasColumnType("bit");

                    b.Property<bool?>("DiabetesMellitus")
                        .HasColumnType("bit");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<double?>("Hemoglobin")
                        .HasColumnType("float");

                    b.Property<double?>("Potassium")
                        .HasColumnType("float");

                    b.Property<double?>("SerumCreatinine")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CKDs");
                });

            modelBuilder.Entity("ML.Core.Models.ForDataSet.Diabetes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<bool?>("Class")
                        .HasColumnType("bit");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<double?>("Glucose")
                        .HasColumnType("float");

                    b.Property<double?>("HbA1cLevel")
                        .HasColumnType("float");

                    b.Property<int?>("HeartDisease")
                        .HasColumnType("int");

                    b.Property<int?>("Hypertension")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Diabeteses");
                });

            modelBuilder.Entity("ML.Core.Models.ForDataSet.HeartAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<bool?>("Class")
                        .HasColumnType("bit");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<double?>("Glucose")
                        .HasColumnType("float");

                    b.Property<int?>("Impluse")
                        .HasColumnType("int");

                    b.Property<double?>("Troponin")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("HeartAttacks");
                });

            modelBuilder.Entity("ML.Core.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ML.Core.Models.InsuranceCompany", b =>
                {
                    b.Property<int>("InsuranceCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceCompanyId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("InsuranceCompanyId");

                    b.ToTable("InsuranceCompanies");
                });

            modelBuilder.Entity("ML.Core.Models.InsuranceCompanyPatient", b =>
                {
                    b.Property<int>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RigesterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("InsuranceCompanyId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("InsuranceCompanyPatient");
                });

            modelBuilder.Entity("ML.Core.Models.InsuranceCompanyPhone", b =>
                {
                    b.Property<int>("InsuranceCompanyPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceCompanyPhoneId"), 1L, 1);

                    b.Property<int>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsuranceCompanyPhoneId");

                    b.HasIndex("InsuranceCompanyId");

                    b.ToTable("InsuranceCompanyPhones");
                });

            modelBuilder.Entity("ML.Core.Models.LaboratoryConstant", b =>
                {
                    b.Property<int>("LaboratoryConstantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LaboratoryConstantId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LabName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("LogoImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LogoImage2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MangarName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("PriceOfUnit")
                        .HasColumnType("float");

                    b.HasKey("LaboratoryConstantId");

                    b.ToTable("LaboratoryConstants");
                });

            modelBuilder.Entity("ML.Core.Models.LaboratoryConstantPhone", b =>
                {
                    b.Property<int>("LaboratoryConstantPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LaboratoryConstantPhoneId"), 1L, 1);

                    b.Property<int>("LaboratoryConstantId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LaboratoryConstantPhoneId");

                    b.HasIndex("LaboratoryConstantId");

                    b.ToTable("LaboratoryConstantPhones");
                });

            modelBuilder.Entity("ML.Core.Models.NaturalField", b =>
                {
                    b.Property<int>("NaturalFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NaturalFieldId"), 1L, 1);

                    b.Property<int>("AnalyseId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("Max")
                        .HasColumnType("float");

                    b.Property<double>("Min")
                        .HasColumnType("float");

                    b.HasKey("NaturalFieldId");

                    b.HasIndex("AnalyseId");

                    b.ToTable("NaturalFields");
                });

            modelBuilder.Entity("ML.Core.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("lastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ML.Core.Models.PatientPhone", b =>
                {
                    b.Property<int>("PatientPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientPhoneId"), 1L, 1);

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientPhoneId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientPhones");
                });

            modelBuilder.Entity("ML.Core.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"), 1L, 1);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TestId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ML.Core.Models.TestDetail", b =>
                {
                    b.Property<int>("TestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestDetailId"), 1L, 1);

                    b.Property<int>("AnalyseId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("TestDetailId");

                    b.HasIndex("AnalyseId");

                    b.HasIndex("TestId");

                    b.ToTable("TestDetails");
                });

            modelBuilder.Entity("ML.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ML.Core.Models.UserPhone", b =>
                {
                    b.Property<int>("UserPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPhoneId"), 1L, 1);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPhoneId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("ML.Core.Models.Analyse", b =>
                {
                    b.HasOne("ML.Core.Models.Category", "Category")
                        .WithMany("Analyses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ML.Core.Models.Group", "Group")
                        .WithMany("Analyses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ML.Core.Models.DoctorPhone", b =>
                {
                    b.HasOne("ML.Core.Models.Doctor", "Doctor")
                        .WithMany("DoctorPhones")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ML.Core.Models.InsuranceCompanyPatient", b =>
                {
                    b.HasOne("ML.Core.Models.InsuranceCompany", "InsuranceCompany")
                        .WithMany("InsuranceCompanyPatients")
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ML.Core.Models.Patient", "Patient")
                        .WithMany("InsuranceCompanyPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceCompany");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ML.Core.Models.InsuranceCompanyPhone", b =>
                {
                    b.HasOne("ML.Core.Models.InsuranceCompany", "InsuranceCompany")
                        .WithMany("InsuranceCompanyPhones")
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceCompany");
                });

            modelBuilder.Entity("ML.Core.Models.LaboratoryConstantPhone", b =>
                {
                    b.HasOne("ML.Core.Models.LaboratoryConstant", null)
                        .WithMany("LaboratoryConstantPhones")
                        .HasForeignKey("LaboratoryConstantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ML.Core.Models.NaturalField", b =>
                {
                    b.HasOne("ML.Core.Models.Analyse", "Analyse")
                        .WithMany("NaturalFields")
                        .HasForeignKey("AnalyseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analyse");
                });

            modelBuilder.Entity("ML.Core.Models.PatientPhone", b =>
                {
                    b.HasOne("ML.Core.Models.Patient", "Patient")
                        .WithMany("PatientPhones")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ML.Core.Models.Test", b =>
                {
                    b.HasOne("ML.Core.Models.Doctor", "Doctor")
                        .WithMany("Tests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ML.Core.Models.InsuranceCompany", "InsuranceCompany")
                        .WithMany("Tests")
                        .HasForeignKey("InsuranceCompanyId");

                    b.HasOne("ML.Core.Models.Patient", "Patient")
                        .WithMany("Tests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ML.Core.Models.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("InsuranceCompany");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ML.Core.Models.TestDetail", b =>
                {
                    b.HasOne("ML.Core.Models.Analyse", "Analyse")
                        .WithMany()
                        .HasForeignKey("AnalyseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ML.Core.Models.Test", "Test")
                        .WithMany("TestDetails")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analyse");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ML.Core.Models.UserPhone", b =>
                {
                    b.HasOne("ML.Core.Models.User", "User")
                        .WithMany("UserPhones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ML.Core.Models.Analyse", b =>
                {
                    b.Navigation("NaturalFields");
                });

            modelBuilder.Entity("ML.Core.Models.Category", b =>
                {
                    b.Navigation("Analyses");
                });

            modelBuilder.Entity("ML.Core.Models.Doctor", b =>
                {
                    b.Navigation("DoctorPhones");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ML.Core.Models.Group", b =>
                {
                    b.Navigation("Analyses");
                });

            modelBuilder.Entity("ML.Core.Models.InsuranceCompany", b =>
                {
                    b.Navigation("InsuranceCompanyPatients");

                    b.Navigation("InsuranceCompanyPhones");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ML.Core.Models.LaboratoryConstant", b =>
                {
                    b.Navigation("LaboratoryConstantPhones");
                });

            modelBuilder.Entity("ML.Core.Models.Patient", b =>
                {
                    b.Navigation("InsuranceCompanyPatients");

                    b.Navigation("PatientPhones");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ML.Core.Models.Test", b =>
                {
                    b.Navigation("TestDetails");
                });

            modelBuilder.Entity("ML.Core.Models.User", b =>
                {
                    b.Navigation("Tests");

                    b.Navigation("UserPhones");
                });
#pragma warning restore 612, 618
        }
    }
}
